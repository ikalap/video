name: k3s-deployment
on:
  push:
    branches:
      - master

# 镜像的名称
env:
  REPO_NAME: kalpa-video

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 0. 获取最新代码和设置环境变量
      - uses: actions/checkout@v1
      - name: 设置环境变量
        run: |
          export TZ=Asia/Shanghai
          echo "BUILD_TIME=$(date +"%y%m%d%H%M%S")" >> $GITHUB_ENV

      # 1. java编译 和打包
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 2. 修改deployment.yml文件
      - name: 修改deployment.yaml文件
        run: |
          sed -i "s/{image_name}/${{ env.REPO_NAME }}/g" deployment.yaml
          sed -i "s/{image_tag}/${{ env.BUILD_TIME }}/g" deployment.yaml

      # 3. 上传文件到服务器
      - name: 上传文件到服务器
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}     # 引用 GitHub Secrets 中的服务器 IP
          username: ${{ secrets.SERVER_USER }} # 引用 GitHub Secrets 中的用户名
          password: ${{ secrets.SERVER_PASS }} # 引用 GitHub Secrets 中的密码
          source: "./deployment.yaml,./Dockerfile,./target/*.jar"
          target: /github-action/${{ env.REPO_NAME }}/    # 上传到服务器的目标目录
          overwrite: true  #文件覆盖模式
          command_timeout: 10m
          timeout: 30s

      # 4. 通过ssh执行shell命令，在服务器上构建镜像并部署
      - name: 在服务器上构建镜像并部署
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}     # 引用 GitHub Secrets 中的服务器 IP
          username: ${{ secrets.SERVER_USER }} # 引用 GitHub Secrets 中的用户名
          password: ${{ secrets.SERVER_PASS }} # 引用 GitHub Secrets 中的密码
          script: |
            cd /github-action/${{ env.REPO_NAME }}/
            docker login ccr.ccs.tencentyun.com --username=${{ secrets.REGISTRY_USERNAME }} --password=${{ secrets.REGISTRY_PASSWORD }}
            docker build -t ccr.ccs.tencentyun.com/kalpa/${{ env.REPO_NAME }}:${{ env.BUILD_TIME }} .
            docker push ccr.ccs.tencentyun.com/kalpa/${{ env.REPO_NAME }}:${{ env.BUILD_TIME }}
            kubectl apply -f deployment.yaml
            kubectl rollout status -n default deployment/${{ env.REPO_NAME }}